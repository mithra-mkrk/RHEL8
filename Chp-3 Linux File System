Linux file system is organized into a single inverted tree


LOCATION PURPOSE
/usr Installed software, shared libraries, include files, and read-only program data.
Important subdirectories include:
• /usr/bin: User commands.
• /usr/sbin: System administration commands.
• /usr/local: Locally customized software.
/etc Configuration files specific to this system.
/var Variable data specific to this system that should persist between boots. Files
that dynamically change, such as databases, cache directories, log files,
printer-spooled documents, and website content may be found under /var.



/run---- Runtime data for processes started since the last boot. This includes process
ID files and lock files, among other things. The contents of this directory are
recreated on reboot. This directory consolidates /var/run and /var/lock
from earlier versions of Red Hat Enterprise Linux.


/home Home directories are where regular users store their personal data and
configuration files.


/root Home directory for the administrative superuser, root.


/tmp A world-writable space for temporary files. Files which have not been
accessed, changed, or modified for 10 days are deleted from this directory
automatically. Another temporary directory exists, /var/tmp, in which files
that have not been accessed, changed, or modified in more than 30 days are
deleted automatically.


/boot Files needed in order to start the boot process.


/dev Contains special device files that are used by the system to access hardware.


*********************************************************************************************************************************************************************

ls -l //long list format
ls -a //all files, inc hidden
la -R // recursive , to inculde the contents of all subdirectories.


mkdir -- make my directory
mkdir -p // creates multiple home directory and sub directory

cp file new-file // copy command

cp -r directory new-directory // copy directory and contents


mv file new-file //move or rename

rm file  //remove file

rm -r  //remove directory

rmdir  // remove empty directory


df // list all the directories that are on the diff file system

Hardlink :: if the created link or orginal link is deleted stil we dont loose the data


ln is used to create hardlink

ln newfile1.txt /tmp/newfile1.txt

ls -il newfile.txt /tmp/newfile1.txt

provides inode number i -- inode which is same for the both the files which are having same hardlink


Softlink: when the orginal file is deleted the softlink doesnt work, its called dangling link , the second link will be present but wont work.

ln -s filelocation1 filelocation2

they have two diff inodes

















